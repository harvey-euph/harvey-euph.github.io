---
title: "Smart-Pointer"
date: 2025-07-24 12:00:00 +0800
categories: [Careers, Tech]
tags: [C++, Tech]
---

你能說說 C++ 的 Smart Pointer 嗎?

這是面試的時候常會被問到的問題，我自己現在的公司面試我的時候也問了，但我直到最近才真正理解了一些之前一直沒有搞清楚的問題。

現在的 C++ 有三種 Smart Pointer，分別是 `std::unique_ptr`、`std::shared_ptr` 和 `std::weak_ptr`。
`std::unique_ptr` 做的事非常單純，他就是一個符合 C++ 的 RAII 原則的指標，當他的生命周期結束時解構子就會去釋放他所指向的物件。
這個指標只能有一個所有者，所以他不能被複製，但可以被移動。
這樣的設計可以確保在使用 `std::unique_ptr` 的時候不會有多個指標指向同一個物件，從而避免了資源釋放的問題。

`std::shared_ptr` 是一個可以被多個指標共享的指標，他會在內部使用引用計數來管理資源。
當一個 `std::shared_ptr` 被複製時，引用計數會增加，當一個 `std::shared_ptr` 被釋放時，引用計數會減少。
當引用計數變為 0 時，資源會被釋放。
這樣的設計可以讓多個指標共享同一個資源，但也帶來了循環引用的問題。
為了解決這個問題，C++ 提供了 `std::weak_ptr`，這是一個不會增加引用計數的指標。
`std::weak_ptr` 可以用來觀察 `std::shared_ptr` 所指向的資源，但不會影響資源的生命週期。
當 `std::weak_ptr` 被轉換為 `std::shared_ptr` 時，如果原來的資源還存在，則可以安全地使用它。
這樣的設計可以避免循環引用的問題，並且可以在需要時安全地訪問資源。

以上都是廢話，都是 Copilot 自己生成的，雖然都是實話，但完全都是廢話，看完也感受不到到底什麼情況會遇到循環引用，或是為什麼要使用 `std::weak_ptr`。

直到最近在工作中遇到神秘的 Bug 讓我理解到這樣的設計是真的需要的，讓我們考慮一個情境：

> 未完待續
{: .prompt-tip }